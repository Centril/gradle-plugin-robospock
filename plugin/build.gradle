/*
 * Copyright 2014 Centril / Mazdak Farrokhzad <twingoow@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Buildscript dependencies:
 */
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.5'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'

		classpath 'com.android.tools.build:gradle:+'
	}
}

plugins {
	id 'groovy'
	id 'idea'
	id 'maven-publish'
	id 'jacoco'
	id "com.github.kt3k.coveralls" version "2.0.1"
	id "com.github.ben-manes.versions" version "0.5"
    id 'com.github.hierynomus.license' version '0.11.0'
    id "com.jfrog.bintray" version "0.5"
}

/*
 * Config:
 */
group = 'se.centril.robospock'
version = '0.1.1'
ext.projname = 'gradle-plugin-robospock'
ext.projdesc = 'gradle plugin for configuring robospock (gradle + spock + roboelectric) easily.'
ext.gitrepo = "centril/${projname}"
ext.giturl = "https://github.com/${gitrepo}"

ext.spock = [
		// Testing framework versions.
		spockVersion : '0.7-groovy-2.0',
		groovyVersion: '2.3.6',
		clibVersion  : '3.1',
		objenesisVersion: '2.1'
]

/*
 * Wrapper:
 */
task wrapper( type: Wrapper ) {
	gradleVersion = '2.10'
}

/*
 * License:
 */
license {
	header = rootProject.file('config/HEADER')
	strictCheck = true
	ignoreFailures = false
	useDefaultMappings = true
	ext.year = '2014'
}

/*
 * jacoco:
 */
jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

/*
 * Tasks for clearing:
 */
task cleanMaven( type: Delete ) { delete '../maven-deploy' }
task cleanOutput( type: Delete ) { delete 'classes' }
task cleanGradle( type: Delete ) { delete '.gradle' }
task cleanAll( dependsOn: [clean, cleanGradle, cleanMaven, cleanOutput, cleanIdea] ) {}
task c( dependsOn: cleanAll )

/*
 * Dependencies:
 */
repositories {
	jcenter()
}
dependencies {
	compile gradleApi()
	compile localGroovy()
	compile 'com.android.tools.build:gradle:+'
	testCompile "org.codehaus.groovy:groovy-all:${spock.groovyVersion}"
	testCompile "org.spockframework:spock-core:${spock.spockVersion}"
	testCompile "cglib:cglib-nodep:${spock.clibVersion}"
	testCompile "org.objenesis:objenesis:${spock.objenesisVersion}"
}

/*
 * Publishing config:
 */
build.finalizedBy publish

// sources.jar generation
task sourceJar( type: Jar ) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

// groovydoc.jar generation
task groovydocJar( type: Jar, dependsOn: groovydoc ) {
	classifier = 'groovydoc'
	from groovydoc.destinationDir
}

ext.mavenArtifacts = [sourceJar, groovydocJar]

publishing {
	repositories {
		maven {
			url uri( "../maven-deploy" )
		}
	}

	publications {
		maven( MavenPublication ) {
			from components.java

			mavenArtifacts.each { 
				artifact( it ) {
					classifier = it.classifier
				}
			}

			def gitconn = "scm:git:git@github.com:${gitrepo}.git"

			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name projname
					description projdesc
					url giturl
					scm {
						url giturl
						connection gitconn
						developerConnection gitconn
					}
					inceptionYear '2014'
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'Centril'
							name 'Mazdak Farrokhzad'
							email 'twingoow@gmail.com'
						}
					}
				}
			}
		}
	}
}

println project.getProperty("bintrayUser")

/*
 * Bintray config:
 */
def prop( String propertyName, defaultValue ) {
	hasProperty( propertyName ) ? getProperty( propertyName ) : defaultValue
}

bintray {
	// this usually comes form gradle.properties file in ~/.gradle
	user = prop( "bintrayUser", '' )
	key  = prop( "bintrayKey", '' )

	// see publications closure
	publish = true
	publications = ['maven']
	pkg {
		repo = 'maven'
		name = "${group}:${projname}"
		desc = projdesc
		licenses = ['Apache-2.0']
		labels = ['robospock', 'gradle', 'plugin', 'roboelectric',
				  'spock', 'android', 'unit-testing']
		websiteUrl = giturl
		issueTrackerUrl = "{$giturl}/issues"
		vcsUrl = giturl
		version {
			name = project.version
            vcsTag = project.version
			attributes = [
				'gradle-plugin': "robospock:${group}:${projname}"
			]
            gpg {
            	sign = true
            }
        }
		publicDownloadNumbers = true
	}
}
